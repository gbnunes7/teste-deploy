import CardSentiment from '@/components/CardSentiment';
import CardTotalAnalyzes from '@/components/CardTotalAnalyzes';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { WordCloud } from '@/components/WordCloud';
import { useCsvAnalyzeStore } from '@/store/useCsvAnalyzeStore';
import { calculateStats } from '@/utils/calculateStats';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { SentimentTable } from '@/components/SentimentTable';
import { SentimentBarChart } from '@/components/SentimentBarChart';
import { SentimentDonutChart } from '@/components/SentimentDonutChart';
import { useEffect, useState } from 'react';
import type { Feedback } from '@/types/feedback';
import ModalFeedbackDetails from '@/components/ModalFeedbackDetails';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { getTagsName } from '@/services/get-tags-name';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import { TriangleAlert } from 'lucide-react';
import { getAnalysis } from '@/services/get-analysis';
import Spinner from '@/components/Spinner';

const FormSchema = z.object({
  fileName: z
    .string({ required_error: 'Please, select a file' })
    .min(1, { message: 'Please, select a file' }),
});

export function CsvAnalyze() {
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
  });

  const { feedbacks, clearFeedbacks, addFeedback } = useCsvAnalyzeStore();

  const [selectFeedback, setSelectFeedback] = useState<Feedback | null>(null);
  const [latestAnalysis, setLatestAnalysis] = useState<[] | null>(null);
  const [isDetailsFeedbackModalOpen, setIsDetailsFeedbackModalOpen] = useState(false);

  useEffect(() => {
    const fetchLatestAnalysis = async () => {
      const { data } = await getTagsName();
      setLatestAnalysis(data);
    };
    fetchLatestAnalysis();
  }, []);

  const {
    negativeCount,
    negativePercentage,
    neutralCount,
    neutralPercentage,
    positiveCount,
    positivePercentage,
    total,
  } = calculateStats(feedbacks);

  const handleSelectSentiment = (feedback: Feedback) => {
    setSelectFeedback(feedback);
    setIsDetailsFeedbackModalOpen((prev) => !prev);
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    try {
      clearFeedbacks();
      const { data: feedbacks } = await getAnalysis({
        values: [data.fileName],
      });

      // biome-ignore lint/complexity/noForEach: <explanation>
      feedbacks.forEach((feedback: Feedback) => addFeedback(feedback));
    } catch (error) {
      console.error(error);
    }
  });

  return (
    <div className="flex flex-col gap-2">
      {isDetailsFeedbackModalOpen && feedbacks.length > 0 && (
        <ModalFeedbackDetails
          feedback={selectFeedback?.Text || ''}
          sentiment={selectFeedback?.Sentiment_Prediction || ''}
          onCloseModal={() => setIsDetailsFeedbackModalOpen((prev) => !prev)}
        />
      )}
      <div className="flex flex-col items-center gap-6 lg:justify-between lg:flex-row lg:gap-0">
        <div>
          <h2 className="text-3xl font-bold">Sentiment Analysis</h2>
          <p className="text-2xl font-regular text-gray-500">
            Visualize the insights generated by AI from your data
          </p>
        </div>
        <form onSubmit={handleSubmit} className="flex flex-col gap-4 lg:mr-10 lg:flex-row">
          <div className="flex flex-col gap-2">
            <Select
              onValueChange={(value) => {
                console.log('value changed: ', value);
                form.setValue('fileName', value);
              }}
              value={form.watch('fileName') || ''}
              key={form.watch('fileName') || 'default-key'}
            >
              <SelectTrigger className="min-h-12 text-lg border-black border-2 hover:cursor-pointer">
                <SelectValue placeholder="Choose a uploaded review" />
              </SelectTrigger>
              <SelectContent>
                {latestAnalysis?.map((item) => (
                  <SelectItem key={`analysis-${item}`} value={item}>
                    {item}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {form.formState.errors.fileName && (
              <div className="flex items-center gap-2">
                <TriangleAlert className="text-red-500 lg:text-xl" />
                <span className="text-red-500 lg:text-xl">
                  {form.formState.errors?.fileName?.message}
                </span>
              </div>
            )}
          </div>

          <Button
            type="submit"
            className="min-h-12 text-lg font-bold w-full md:w-1/3"
            disabled={form.formState.isSubmitting}
          >
            Analyze
          </Button>
        </form>
      </div>

      {feedbacks.length === 0 && !form.formState.isSubmitting && (
        <div className="flex flex-col items-center gap-4 justify-center mt-60">
          <p className="text-2xl font-regular text-gray-500 ">
            No data available for analysis. Please upload a CSV file.
          </p>
          <span className="text-2xl font-regular text-gray-500 ">
            Or, select an old analysis
          </span>
        </div>
      )}

      {form.formState.isSubmitting && (
        <div className="flex items-center justify-center mt-80">
          {/* biome-ignore lint/correctness/noChildrenProp: <explanation> */}
          <Spinner children="" textColor="text-black" />
          <p className="text-2xl font-regular text-gray-500 ">Analyzing...</p>
        </div>
      )}

      {feedbacks.length > 0 && (
        <>
          <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-4 mt-4">
            <CardTotalAnalyzes total={total} />
            <CardSentiment
              sentiment="positive"
              title="Positive Sentiment"
              count={positiveCount}
              percentage={positivePercentage}
              total={total}
            />
            <CardSentiment
              sentiment="neutral"
              title="Neutral Sentiment"
              count={neutralCount}
              percentage={neutralPercentage}
              total={total}
            />
            <CardSentiment
              sentiment="negative"
              title="Negative Sentiment"
              count={negativeCount}
              percentage={negativePercentage}
              total={total}
            />
          </div>

          <div className="grid gap-4 md:grid-cols-2 mt-4">
            <Card className="col-span-1">
              <CardHeader>
                <CardTitle>Sentiment Distribution</CardTitle>
                <CardDescription>
                  Percentage analysis of the detected sentiments
                </CardDescription>
              </CardHeader>
              <CardContent>
                <SentimentDonutChart
                  negativeCount={negativeCount}
                  neutralCount={neutralCount}
                  positiveCount={positiveCount}
                  total={total}
                  negativePercentage={negativePercentage}
                  neutralPercentage={neutralPercentage}
                  positivePercentage={positivePercentage}
                />
              </CardContent>
            </Card>
            <Card className="col-span-1">
              <CardHeader>
                <CardTitle>Overview</CardTitle>
                <CardDescription>
                  Summary of the sentiment analysis
                </CardDescription>
              </CardHeader>
              <CardContent className="pl-2">
                <SentimentBarChart
                  negativeCount={negativeCount}
                  negativePercentage={negativePercentage}
                  neutralCount={neutralCount}
                  neutralPercentage={neutralPercentage}
                  positiveCount={positiveCount}
                  positivePercentage={positivePercentage}
                  total={total}
                />
              </CardContent>
            </Card>
          </div>

          <div className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>Word Cloud</CardTitle>
                <CardDescription>
                  Words most frequent in feedbacks
                </CardDescription>
              </CardHeader>
              <CardContent>
                <WordCloud />
              </CardContent>
            </Card>
          </div>

          <div className="mt-4">
            <Tabs defaultValue="all">
              <div className="flex items-center justify-between">
                <TabsList>
                  <TabsTrigger value="all">All</TabsTrigger>
                  <TabsTrigger value="positive">Positive</TabsTrigger>
                  <TabsTrigger value="neutral">Neutral</TabsTrigger>
                  <TabsTrigger value="negative">Negative</TabsTrigger>
                </TabsList>
              </div>

              <TabsContent value="all" className="mt-4">
                <SentimentTable
                  onClickSentiment={handleSelectSentiment}
                  data={feedbacks}
                />
              </TabsContent>

              <TabsContent value="positive" className="mt-4">
                <SentimentTable
                  onClickSentiment={handleSelectSentiment}
                  data={feedbacks.filter(
                    (item) => item.Sentiment_Prediction === 'positivo',
                  )}
                />
              </TabsContent>

              <TabsContent value="neutral" className="mt-4">
                <SentimentTable
                  onClickSentiment={handleSelectSentiment}
                  data={feedbacks.filter(
                    (item) => item.Sentiment_Prediction === 'neutro',
                  )}
                />
              </TabsContent>

              <TabsContent value="negative" className="mt-4">
                <SentimentTable
                  onClickSentiment={handleSelectSentiment}
                  data={feedbacks.filter(
                    (item) => item.Sentiment_Prediction === 'negativo',
                  )}
                />
              </TabsContent>
            </Tabs>
          </div>
        </>
      )}
    </div>
  );
}
